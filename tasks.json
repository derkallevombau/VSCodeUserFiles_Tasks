{
	// See https://go.microsoft.com/fwlink/?LinkId=733558
	// for the documentation about the tasks.json format
	"version": "2.0.0",
	"tasks":
	[
		// {
		// 	"label": "Create new TypeScript project",
		// 	"type": "shell",
		// 	"command": "",
		// 	"problemMatcher": []
		// },
		{
			"label": "Add gjs typings",
			"detail": "Adds Gnome JavaScript typings to the current project. ‘@ci-types/gjs’ must be installed globally for this to work.",
			"type": "shell",
			"command": "npm link @ci-types/gjs && echo '{ \"exclude\": [\"node_modules\"] }' >jsconfig.json && mkdir typings && echo 'import \"@ci-types/gjs\";' >typings/gjs.d.ts",
			"problemMatcher": []
		},

		// Meson Tasks

		{
			"label": "Meson project: Setup",
			"detail": "Tells Meson to use ‘<Workspace root>/build’ as build dir. A preexisting build dir will be deleted first. Finally, the current project configuration is printed.",
			"type": "shell",
			"command": "rm -rf build && meson setup build . && echo && meson configure build",
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Meson project: Configure",
			"detail": "Run \"Meson project: Print Config\" to see available options.",
			"type": "shell",
			"command": "meson configure build ${input:mesonCfgOpts}",
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Meson project: Print Config",
			"type": "shell",
			"command": "meson configure build",
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Meson project: Build",
			"type": "shell",
			"command": "ninja -C build",
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Meson project: Install",
			"type": "shell",
			"command": "ninja -C build install",
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},

		// Git Tasks

		{
			"label": "Git: Create GitHub Repo",
			"detail": "Creates a new repo on GitHub and adds it as remote ‘origin’ to the local repo in the cwd, replacing a preexisting ‘origin’, if any. If there is no local repo, it will be created first.",
			"type": "shell",
			"command": "[ -d .git ] || git init && { url=$(git remote get-url origin 2>/dev/null) && { echo -en \"\\e[1m\\e[97mWarning: origin is already set to $url. Do you really want to replace it?\\e[0m \\e[97m[y/N] \\e[1m\"; command -v tput >/dev/null && haveTput=1; ((haveTput)) && tput sc; while true; do read -n 1 ans; case $ans in '') echo -en \"\\e[0m\" ;;& [yYnN]) echo -e \"\\e[0m\" ;;& [yY]) break ;; [nN]|'') echo -e \"\nAborted.\"; exit ;; *) ((haveTput)) && tput rc && tput el ;; esac; done } || :; } && hub create ${input:createGHRepo.pOpt} $(sed \"s/%d/$(basename \"$(pwd)\")/\" <<<\"${input:createGHRepo.projectName}\")",
			"problemMatcher": []
		},

		// Rebase
		{
			"label": "Git: Begin interactive rebase with autostash",
			"type": "shell",
			"command": "exec-in-git-repo-root-dir git rebase -i --autostash ${input:gitRebaseArgRebaseMergesOrEmpty} ${input:gitRebaseArgs}",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Git: Continue rebase",
			"type": "shell",
			"command": "exec-in-git-repo-root-dir git rebase --continue",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Git: Abort rebase",
			"type": "shell",
			"command": "exec-in-git-repo-root-dir git rebase --abort",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},

		// Add (because sudo doesn't work ATM when called from within an extension)
		{
			"label": "Git: Add",
			"type": "shell",
			"command": "exec-in-git-repo-root-dir git add ${file}",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},

		// Commit
		{
			"label": "Git: Commit Staged (Amend)",
			"type": "shell",
			"command": "exec-in-git-repo-root-dir git commit --amend",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Git: Commit using mtime",
			"type": "shell",
			"command": "exec-in-git-repo-root-dir git-commit-using-mtime",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Git: Commit using mtime (append selection to commit message)",
			"type": "shell",
			"command": "exec-in-git-repo-root-dir git-commit-using-mtime --append-to-msg '${selectedText}'",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},

		// Don't ignore
		{
			"label": "Git: Don't ignore",
			"detail": "If the current file is listed in a .gitignore in the same dir, the respective line will be removed. If .gitignore begins with an asterisk, the current file's name will be added to .gitignore, prefixed with an asterisk.",
			"type": "shell",
			"command": "[[ -f .gitignore ]] || echo 'No .gitignore, nothing to do!' && exit 1",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true,
			}
		},

		// Shellscript Tasks

		{
			"label": "Shellscript: Run with 'set -vx' below shebang",
			"type": "shell",
			"command": "f=${file}; addr=\"\\%#! ?(/usr)?/bin/%\"; sed -Ei -e \"${addr}a\\\" -e \"set -vx\" \"$f\"",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},

		// Other Tasks

		{
			"label": "Install downloaded update",
			"detail": "Installs the VS Code deb package in ~/Downloads (highest version if there are multiple) and deletes it after successful installation.",
			"type": "shell",
			"command": "cd ~/Downloads; debs=(code-insiders*); ((! ${debs[@]})) && echo 'No VS Code deb package found in ~/Downloads, exiting.' && exit 1; newestDeb=${debs[-1]}; sudo --askpass dpkg -i $newestDeb && rm $newestDeb",
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
	],
	"inputs":
	[
		// Meson Tasks
		{
			"id": "mesonCfgOpts",
			"description": "Set build options via ‘-Dopt=value’.",
			"type": "promptString",
			"default": "-Dbuildtype=release -Ddebug=false -Doptimization=3 -Dstrip=true -Db_lto=true -Db_lto_threads=4"

		},

		// Git: Create GitHub Repo
		{
			"id": "createGHRepo.projectName",
			"description": "Enter the name for new GitHub repo. You may use ‘%d’ to insert the name of the cwd. Leave empty to just use the name of the cwd.",
			"type": "promptString"
		},
		{
			"id": "createGHRepo.pOpt",
			"description": "Choose ‘-p’ to create a private GitHub repo or leave empty for a public one.",
			"type": "pickString",
			"options": ["-p", ""],
		},

		// Git: Begin interactive rebase with autostash
		{
			"id": "gitRebaseArgRebaseMergesOrEmpty",
			"description": "Choose ‘--rebase-merges’ if you want to preserve merge commits or leave empty if you don't want.",
			"type": "pickString",
			"options": ["--rebase-merges", ""]
		},
		{
			"id": "gitRebaseArgs",
			"description": "Please enter further args or press Enter to use ‘HEAD^’.",
			"type": "promptString",
			"default": "HEAD^"
		},
	]
}
