{
	// See https://go.microsoft.com/fwlink/?LinkId=733558
	// for the documentation about the tasks.json format
	"version": "2.0.0",
	"tasks":
	[
		// {
		// 	"label": "Create new TypeScript project",
		// 	"type": "shell",
		// 	"command": "",
		// 	"problemMatcher": []
		// },
		{
			"label": "Add gjs typings",
			"detail": "Adds Gnome JavaScript typings to the current project. ‘@ci-types/gjs’ must be installed globally for this to work.",
			"type": "shell",
			"command": "npm link @ci-types/gjs && echo '{ \"exclude\": [\"node_modules\"] }' >jsconfig.json && mkdir typings && echo 'import \"@ci-types/gjs\";' >typings/gjs.d.ts",
			"problemMatcher": []
		},

		// Meson Tasks
		{
			"label": "Meson project: Configure",
			"type": "shell",
			"command": "mkdir -p build && meson setup -Dbuildtype=release -Ddebug=false -Doptimization=3 -Dstrip=true -Db_lto=true -Db_lto_threads=4 build .",
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Meson project: Build",
			"type": "shell",
			"command": "ninja -C build",
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Meson project: Install",
			"type": "shell",
			"command": "ninja -C build install",
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},

		// Git Tasks

		{
			"label": "Git: Create GitHub Repo",
			"detail": "Creates a new repo on GitHub and adds it as remote ‘origin’ to the local repo in the cwd, replacing a preexisting ‘origin’, if any. If there is no local repo, it will be created first.",
			"type": "shell",
			"command": "[ -d .git ] || git init && { url=$(git remote get-url origin 2>/dev/null) && { echo -en \"\\e[1m\\e[97mWarning: origin is already set to $url. Do you really want to replace it?\\e[0m \\e[97m[y/N] \\e[1m\"; command -v tput >/dev/null && haveTput=1; ((haveTput)) && tput sc; while true; do read -n 1 ans; case $ans in '') echo -en \"\\e[0m\" ;;& [yYnN]) echo -e \"\\e[0m\" ;;& [yY]) break ;; [nN]|'') echo -e \"\nAborted.\"; exit ;; *) ((haveTput)) && tput rc && tput el ;; esac; done } || :; } && hub create ${input:createGHRepo.pOpt} $(sed \"s/%d/$(basename \"$(pwd)\")/\" <<<\"${input:createGHRepo.projectName}\")",
			"problemMatcher": []
		},

		// Rebase
		{
			"label": "Git: Begin interactive rebase with autostash",
			"type": "shell",
			"command": "exec-in-git-repo-root-dir git rebase -i --autostash ${input:gitRebaseArgRebaseMergesOrEmpty} ${input:gitRebaseArgs}",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Git: Continue rebase",
			"type": "shell",
			"command": "exec-in-git-repo-root-dir git rebase --continue",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Git: Abort rebase",
			"type": "shell",
			"command": "exec-in-git-repo-root-dir git rebase --abort",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},

		// Commit
		{
			"label": "Git: Commit Staged (Amend)",
			"type": "shell",
			"command": "exec-in-git-repo-root-dir git commit --amend",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
		{
			"label": "Git: Commit using mtime",
			"type": "shell",
			"command": "exec-in-git-repo-root-dir git-commit-using-mtime",
			"options": { "cwd": "${fileDirname}" },
			"problemMatcher": [],
			"presentation":
			{
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": true
			}
		},
	],
	"inputs":
	[
		// Git: Create GitHub Repo
		{
			"id": "createGHRepo.projectName",
			"description": "Enter the name for new GitHub repo. You may use ‘%d’ to insert the name of the cwd. Leave empty to just use the name of the cwd.",
			"type": "promptString"
		},
		{
			"id": "createGHRepo.pOpt",
			"description": "Choose ‘-p’ to create a private GitHub repo or leave empty for a public one.",
			"type": "pickString",
			"options": ["-p", ""],
		},

		// Git: Begin interactive rebase with autostash
		{
			"id": "gitRebaseArgRebaseMergesOrEmpty",
			"description": "Choose ‘--rebase-merges’ if you want to preserve merge commits or leave empty if you don't want.",
			"type": "pickString",
			"options": ["--rebase-merges", ""]
		},
		{
			"id": "gitRebaseArgs",
			"description": "Please enter further args or press Enter to use ‘HEAD^’.",
			"type": "promptString",
			"default": "HEAD^"
		},
	]
}
